{"version":3,"sources":["../src/index.ts","../src/config.ts","../src/plugin.ts","../src/util.ts"],"sourcesContent":["import { getTSConfig } from \"./config\";\r\nimport { dtsPlugin } from \"./plugin\";\r\nimport { getLogLevel, humanFileSize } from \"./util\";\r\n\r\nexport { dtsPlugin };\r\nexport const util = {\r\n    humanFileSize, getLogLevel, getTSConfig,\r\n};\r\n","import ts from \"typescript\";\r\nimport { readFileSync } from \"fs\";\r\n\r\nexport function getTSConfig(forcepath?: string, conf?: string, wd = process.cwd()): {loc: string, conf: any} {\r\n    let f = forcepath ?? ts.findConfigFile(wd, ts.sys.fileExists, conf);\r\n    if (!f) throw \"No config file found\";\r\n    if(f.startsWith(\".\")) f = require.resolve(f);\r\n    const c = ts.readConfigFile(f, (path) => readFileSync(path, \"utf-8\"));\r\n    if (c.error) throw c.error;\r\n    else return {loc: f, conf: c.config};\r\n}\r\n\r\nexport interface DTSPluginOpts {\r\n    /**\r\n     * override the directory to output to.\r\n     * @default undefined\r\n     */\r\n    outDir?: string;\r\n    /**\r\n     * path to the tsconfig to use. (some monorepos might need to use this)\r\n     */\r\n    tsconfig?: string;\r\n}\r\n","import { DTSPluginOpts, getTSConfig } from \"./config\";\r\nimport { Plugin } from \"esbuild\";\r\nimport ts from \"typescript\";\r\nimport { existsSync, lstatSync, readFileSync } from \"fs\";\r\nimport chalk from \"chalk\";\r\nimport { getLogLevel, humanFileSize } from \"./util\";\r\nimport { resolve, basename, dirname } from \"path\";\r\nimport { tmpdir } from \"tmp\";\r\nimport { parse } from \"jju\";\r\n\r\nexport const dtsPlugin = (opts: DTSPluginOpts = {}) =>\r\n    ({\r\n        name: \"dts-plugin\",\r\n        async setup(build) {\r\n            // context\r\n            const l = getLogLevel(build.initialOptions.logLevel);\r\n            const conf = getTSConfig(opts.tsconfig);\r\n            const finalconf = conf.conf;\r\n\r\n            // get extended config\r\n            if (Object.prototype.hasOwnProperty.call(conf.conf, \"extends\")) {\r\n                const extendedfile = readFileSync(\r\n                    resolve(dirname(conf.loc), conf.conf.extends),\r\n                    \"utf-8\",\r\n                );\r\n                const extended = parse(extendedfile);\r\n                if (\r\n                    Object.prototype.hasOwnProperty.call(\r\n                        extended,\r\n                        \"compilerOptions\",\r\n                    ) &&\r\n                    Object.prototype.hasOwnProperty.call(\r\n                        finalconf,\r\n                        \"compilerOptions\",\r\n                    )\r\n                ) {\r\n                    finalconf.compilerOptions = {\r\n                        ...extended.compilerOptions,\r\n                        ...finalconf.compilerOptions,\r\n                    };\r\n                }\r\n            }\r\n\r\n            // get and alter compiler options\r\n            const copts = ts.convertCompilerOptionsFromJson(\r\n                finalconf.compilerOptions,\r\n                process.cwd(),\r\n            ).options;\r\n            copts.declaration = true;\r\n            copts.emitDeclarationOnly = true;\r\n            copts.incremental = true;\r\n            if (!copts.declarationDir)\r\n                copts.declarationDir =\r\n                    opts.outDir ?? build.initialOptions.outdir ?? copts.outDir;\r\n\r\n            // auto incremental\r\n            const pjloc = resolve(conf.loc, \"../\", \"package.json\");\r\n            if (existsSync(pjloc)) {\r\n                copts.tsBuildInfoFile = resolve(\r\n                    tmpdir,\r\n                    require(pjloc).name ?? \"unnamed\",\r\n                    \".esbuild\",\r\n                    \".tsbuildinfo\",\r\n                );\r\n            }\r\n            copts.listEmittedFiles = true;\r\n\r\n            // ts compiler stuff\r\n            const host = ts.createIncrementalCompilerHost(copts);\r\n            const files: string[] = [];\r\n\r\n            // get all ts files\r\n            build.onLoad({ filter: /(\\.tsx|\\.ts)$/ }, async (args) => {\r\n                files.push(args.path);\r\n\r\n                host.getSourceFile(\r\n                    args.path,\r\n                    copts.target ?? ts.ScriptTarget.Latest,\r\n                    (m) => console.log(m),\r\n                    true,\r\n                );\r\n\r\n                return {};\r\n            });\r\n\r\n            // finish compilation\r\n            build.onEnd(() => {\r\n                //if (l.includes(\"info\")) console.log();\r\n                // const finalprogram = ts.createProgram(\r\n                //     files,\r\n                //     copts,\r\n                //     host,\r\n                //     program.getProgram(),\r\n                // );\r\n                const finalprogram = ts.createIncrementalProgram({\r\n                    options: copts,\r\n                    host: host,\r\n                    rootNames: files,\r\n                });\r\n                const start = Date.now();\r\n                const emit = finalprogram.emit();\r\n                let final = \"\";\r\n                if (\r\n                    emit.emitSkipped ||\r\n                    typeof emit.emittedFiles === \"undefined\"\r\n                ) {\r\n                    if (l.includes(\"warning\"))\r\n                        console.log(\r\n                            chalk`  {yellow Typescript did not emit anything}`,\r\n                        );\r\n                } else {\r\n                    for (const emitted of emit.emittedFiles) {\r\n                        if (\r\n                            existsSync(emitted) &&\r\n                            !emitted.endsWith(\".tsbuildinfo\")\r\n                        ) {\r\n                            const stat = lstatSync(emitted);\r\n                            final += chalk`  ${resolve(emitted)\r\n                                .replace(resolve(process.cwd()), \"\")\r\n                                .replace(/^[\\\\/]/, \"\")\r\n                                .replace(\r\n                                    basename(emitted),\r\n                                    chalk`{bold ${basename(emitted)}}`,\r\n                                )} {cyan ${humanFileSize(stat.size)}}\\n`;\r\n                        }\r\n                    }\r\n                }\r\n                if (l.includes(\"info\"))\r\n                    console.log(\r\n                        final +\r\n                            chalk`\\n{green Finished compiling declarations in ${\r\n                                Date.now() - start\r\n                            }ms}`,\r\n                    );\r\n            });\r\n        },\r\n    } as Plugin);\r\n","import { LogLevel } from \"esbuild\";\r\n\r\nexport function getLogLevel(level?: LogLevel): LogLevel[] {\r\n    if (!level || level === \"silent\") return [\"silent\"];\r\n\r\n    const levels: LogLevel[] =\r\n        [\"verbose\", \"debug\", \"info\", \"warning\", \"error\", \"silent\"];\r\n\r\n    for (const l of levels) {\r\n        if (l === level) {\r\n            break;\r\n        } else {\r\n            levels.splice(levels.indexOf(l), 1);\r\n        }\r\n    }\r\n\r\n    return levels;\r\n}\r\n\r\nexport function humanFileSize(size: number): string {\r\n    const i = Math.floor(Math.log(size) / Math.log(1024));\r\n    return Math.round((size / Math.pow(1024, i)) * 100) / 100 + [\"b\", \"kb\", \"mb\", \"gb\", \"tb\"][i];\r\n}\r\n"],"mappings":"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","names":[]}