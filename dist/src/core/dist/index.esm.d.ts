export var App: {
    new (input: any, options?: {}): {
        remote: boolean;
        packagePath: string;
        pluginPath: string;
        graphPath: string;
        ok: boolean;
        parentNode: HTMLElement;
        nested: {};
        isNested: boolean;
        checkJSONConversion: (info: any) => any;
        getURL: (str: any) => string | false;
        set: (input: any, name2: any) => void;
        name: any;
        "#base": any;
        base: any;
        package: any;
        info: any;
        tree: any;
        setPlugins: (plugins?: any) => any;
        plugins: any;
        setTree: (graph?: any) => any;
        join: (...paths: any[]) => string;
        getBase: (path: any) => any;
        json: (src: any) => Promise<any>;
        setPackage: (pkg: any) => void;
        init: () => Promise<void>;
        setParent: (parentNode: any) => void;
        start: () => Promise<boolean>;
        graph: any;
        stop: () => void;
        onstart: () => void;
        onstop: () => void;
        debug: any;
        router: any;
        animated: {};
    };
};
export var Plugins: {
    new (source?: string): {
        readyState: boolean;
        checkedPackageLocations: {};
        list: Set<any>;
        base: string;
        suffixes: {
            metadata: string;
            graph: string;
            plugins: string;
        };
        regexp: {};
        init: () => Promise<void>;
        filesystem: {
            isNative: (info2: any) => boolean;
            openNative: (path: any, config: any) => Promise<any>;
            mountNative: (handle: any, config: any) => Promise<any>;
            oninit: (info: any) => Promise<void>;
            dependencies: {};
            dependents: {};
            changelog: any[];
            files: {};
            ignore: any[];
            groups: {};
            groupConditions: Set<any>;
            init: () => Promise<void>;
            root: any;
            addGroup: (name22: any, initial: any, condition: any) => void;
            cloneGroup: (o: any) => {
                condition: any;
            };
            subsystem: (path: any) => Promise<any>;
            reset: () => void;
            createFileSystemInfo: () => {};
            checkToLoad: (path: any) => any;
            load: (file: any, path: any, dependent: any) => Promise<any>;
            trackDependency: (path: any, dependent: any) => void;
            add: (file: any) => void;
            openRemote: (path: any, config: any) => Promise<any>;
            mountRemote: (url: any, config: any) => Promise<undefined>;
            open: (path: any, create: any) => Promise<any>;
            save: (force: any, progress?: any) => Promise<any>;
            sync: () => Promise<any[]>;
            transfer: (target: any) => Promise<void>;
            apply: (system: any) => Promise<void>;
            name: any;
            native: any;
            debug: any;
            writable: any;
            progress: any;
            codecs: any;
        };
        set: (f: any) => void;
        getFile: (url: any) => Promise<any>;
        package: (name2: any) => Promise<any>;
        get: (name2: any, type7?: string) => Promise<any>;
        metadata: (name2: any) => Promise<any>;
        plugins: (name2: any) => Promise<any>;
        graph: (name2: any) => Promise<any>;
        getPath: (name2: any) => any;
        path: (path: any, type7?: string) => any;
        module: (name2: any) => Promise<any>;
        source: any;
        "#plugins": {};
    };
};
declare var editable_exports: {};
export { editable_exports as editable };
